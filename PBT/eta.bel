LF ty : type =
   | unit : ty
   | arr  : ty -> ty -> ty
;

LF tm : ty -> type =
   | lam : (tm A -> tm B) -> tm (arr A B)
   | app : tm (arr A B) -> tm A -> tm B
   | ep : tm unit
;

schema cxt = tm A;


LF step : tm A -> tm A -> type =
  | reta  : step (lam \x.  (app M x)) M
  | ueta  : step M ep
  | rlam  : ({x : tm A} step (M x) (M' x)) -> step (lam M) (lam M')
  | rappl : step M M' -> step (app M N) (app M' N)
  | rappr : step N N' -> step (app M N) (app M N')
;

LF diff : tm A -> tm A -> type =
  | dal   : diff (lam _) (app _ _)
  | dla   : diff (app _ _) (lam _)
  | de3   : diff (app _ _) ep
  | de4   : diff ep (app _ _)
  | dac1  :   diff E1 F1 -> diff (app E1 E2) (app F1 F2)
  | dac2  :  diff E2 F2 → diff (app E1 E2) (app F1 F2)
  | dl2   : {x:tm _}
	     ({A1:tm _}{A2:tm _} diff x (app A1 A2) -> diff (app A1 A2 ) x) → 
     diff (M x) (N x) →     diff (lam M) (lam N)
;

LF not_joinable : tm A -> tm A -> type =
  | nj :  diff P1 P2 → step M1 P1 → step M2 P2 → diff M1 M2 →  not_joinable M1 M2 ;
    
LF nat : type =
  | z     : nat
  | sc    : nat -> nat
;

LF hei : nat -> tm A -> type =
| he : hei _ ep
| h3 : hei H N →  hei H M →   hei (sc H) (app M N)
| h4 :  ({x:tm _} ({h:nat} hei h x) -> hei H (M x))
	 →  hei (sc H) (lam M);

LF gencex : nat -> tm A -> tm A -> tm A -> type =
| c :   not_joinable M1 M2 →  step M M1 →  step M M2 → hei I M →  gencex I M M1 M2;


--query 1 1 (gencex (sc (sc ( z))) M M1 M2).
