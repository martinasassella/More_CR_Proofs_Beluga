ty : type. %name ty T.
unit : ty.
arr  : ty -> ty -> ty.

tm : ty -> type . %name tm M.
   lam : (tm A -> tm B) -> tm (arr A B).
app : tm (arr A B) -> tm A -> tm B.
ep : tm unit.


step : tm A -> tm A -> type.
reta : step (lam [x] (app M x)) M.
ueta: step M ep.
    rlam  : ({x : tm A} step (M x) (M' x)) -> step (lam M) (lam M').
    rappl : step M M' -> step (app M N) (app M' N).
    rappr : step N N' -> step (app M N) (app M N').


diff : tm A -> tm A -> type.

dal : diff  (lam  _) (app _ _).
dla : diff  (app _ _) (lam  _) .
% de2 : diff   (ep) (lam  _). does not type check ...
de3 : diff  (app _  _) (ep).
de4 : diff   (ep) (app _  _).
dac1 : diff (app E1 E2) (app F1 F2)
	<- diff E1 F1.
dac2 : diff (app E1 E2) (app F1 F2)
	<- diff E2 F2.
 dl2 : diff (lam  M) (lam N)
        <- {x : tm _ }({A1:tm _}{A2:tm _} diff x (app A1 A2) -> diff (app A1 A2 ) x)
	%           â†’ diff x ep -> diff ep x
 	  ->	 diff (M x) (N x). % sound but incomplete

not_joinable : tm A -> tm A -> type.

nj: not_joinable M1 M2
     <- diff M1 M2
     <-  step M1  P1
     <-  step M2  P2
     <- diff P1 P2.

nat : type.
z : nat.
sc : nat -> nat.

1 = sc z.
2 = sc 1.
3 = sc 2.
4 = sc 3.
5 = sc 4.

hei :  nat -> tm A -> type.

he : hei _ ep.
h3: hei (sc H) (app M N)
     <- hei H M
     <- hei H N.
h4: hei (sc H) (lam M)
     <- ({x:tm _} ({h:nat} hei h x) -> hei H (M x)).

gencex : nat -> tm A -> tm A -> tm A -> type.

c : gencex I M M1 M2
     <- hei I M
     <-  step M  M1
     <-  step M M2
     <- not_joinable M1 M2.

%query 1 1 gencex 2 M M1 M2.


% M2 = app (lam ([m:tm unit] ep)) ep;
% M1 = ep;
% M = app (lam ([m:tm unit] m)) ep.
