neutral : term -> type.
nf : term -> type.
nfl: nf (lam  M)
      <- ({x} neutral x -> nf (M x)).


nn: nf M <- neutral M.
na: neutral (app M N)
     <- neutral M
	<- nf N.


% incomplete implementation of not equal

diff : term -> term -> type.

da4 : diff  (lam  _) (app _ _).
dac1 : diff (app E1 E2) (app F1 F2)
	<- diff E1 F1.
dac2 : diff (app E1 E2) (app F1 F2)
	<- diff E2 F2.
dl2 : diff (lam  M) (lam N)
       <- {x} diff (M x) (N x). % large incompleteness, see my thesis


id = lam [x] x.
delta = lam [x] (app x x).
cex = (app delta (app id id)).

%query 2 2  P:  cex --> M.

eq : term -> term -> type.

refl : eq M M.
joinable : term -> term -> type.

j1 : joinable M M.
jd: joinable M1 M2
     <-  M1 --> P1
     <-  M2 --> P2
     <- eq P1 P2.
     
not_joinable : term -> term -> type.

nj: not_joinable M1 M2
     <- diff M1 M2
     <-  M1 --> P1
     <-  M2 --> P2
     <- diff P1 P2.

cexcr : term -> term -> type.

c : cexcr M1 M2
     <-  cex --> M1
     <-  cex --> M2
     <- nf M1
     <- nf M2
     <- diff M1 M2.