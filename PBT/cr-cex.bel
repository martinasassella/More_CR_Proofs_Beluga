%%% Untyped lambda-calculus
%Untyped lambda terms
LF term : type =
| lam : (term -> term) -> term
| app : term -> term -> term
;

%Ordinary reduction relation
LF step : term -> term -> type =
| beta1 : step (app (lam M1) M2) (M1 M2)
| lm1   : ({x:term} step (M x) (M' x)) -> step  (lam M) (lam M')
| apl1  : step M1 M1' -> step (app M1 M2) (app M1' M2)
| apr1  : step M2 M2' -> step (app M1 M2) (app M1 M2')
;


LF diff : term -> term -> type =
| dal : diff (lam _) (app _ _)
| dla : diff (app _ _) (lam _)
| dac1 : diff E1 F1 → diff (app E1 E2) (app F1 F2)
| dac2 : diff E2 F2 → diff (app E1 E2) (app F1 F2)
| dll : ({x:term} ({L : term → term} diff x (lam L)) → ({L : term → term} diff (lam L) x) →
	 ({A1: term} {A2: term} diff x (app A1 A2) )
	     → 	 ({A1: term} {A2: term} diff (app A1 A2) x  ) 
	 → diff (M x) (N x))
	→    diff (lam  M) (lam N)
;

LF not_joinable : term -> term -> type =
 | nj :  diff P1 P2 → step M1 P1 → step M2 P2 → diff M1 M2 →  not_joinable M1 M2 ;


nat : type.
z : nat.
sc : nat -> nat.

LF hei : nat -> term -> type =
| h1 : hei H M → hei H N → hei (sc H) (app M N)
| h2 : ({x:term} ({h:nat} hei h x) -> hei H (M x)) → hei (sc H) (lam M)
;

LF gencex : nat -> term -> term -> term -> type =
  | c : not_joinable M1 M2 →  step M M1 →  step M M2 → hei I M →  gencex I M M1 M2;




 --query 1 1 (gencex (sc (sc (sc (sc z)))) M M1 M2).

%  M2 = app (app (lam (\x. x)) (app (lam (\x. x)) (lam (\x. x))))
% (app (app (lam (\x. x)) (lam (\x. x))) (app (lam (\x. x)) (lam (\x. x))));
% M1 = app (app (app (lam (\x. x)) (lam (\x. x))) (lam (\x. x)))
% (app (app (lam (\x. x)) (lam (\x. x))) (app (lam (\x. x)) (lam (\x. x))));
% M = app (app (app (lam (\x. x)) (lam (\x. x)))
%         (app (lam (\x. x)) (lam (\x. x))))
% (app (app (lam (\x. x)) (lam (\x. x))) (app (lam (\x. x)) (lam (\x. x))));.
