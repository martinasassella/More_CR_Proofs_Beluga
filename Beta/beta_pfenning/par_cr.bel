%Substitution lemma
rec subst : (g:rctx)[g, x:term, u:pred x x |- pred M[..,x] M'[..,x]] -> [g |- pred N N'] -> [g |- pred M[..,N] M'[..,N']] =
%/ total d (subst _ _ _ _ _ d _) /
fn d => fn s => case d of
| [g, x:term, u:pred x x |- u] => s
| [g, x:term, u:pred x x |- #p.2[..]] => [g |- #p.2]
| [g, x:term, u:pred x x |- lm \y.\v.D[..,y,v,x,u]] =>
              let [g |- S] = s in
              let [g, b:block(y:term, v: pred y y) |- IH[..,b.1,b.2]] =
              subst [g, b:block(y:term, v: pred y y), x:term, u:pred x x |- D[..,b.1,b.2,x,u]] [g,b |- S[..]] in
              [g |- lm \x.\u.IH[..,x,u]]
| [g, x:term, u:pred x x |- beta (\y.\v.D1[..,y,v,x,u]) D2] =>
              let [g |- S] = s in
              let [g |- D2'] = subst [g,x,u |- D2] s in
              let [g, b:block(y:term, v: pred y y) |- IH[..,b.1,b.2]] =
              subst [g, b:block(y:term, v: pred y y), x:term, u:pred x x |- D1[..,b.1,b.2,x,u]] [g,b |- S[..]] in
              [g |- beta (\y.\v.IH[..,y,v]) D2']
| [g, x:term, u:pred x x |- ap D1 D2] =>
                      let [g |- IH1] = subst [g,x,u |- D1] s in
                      let [g |- IH2] = subst [g,x,u |- D2] s in
                      [g |- ap IH1 IH2]
;

%Diamond property lemma
LF dia_prop: term -> term -> type =
| dia_result: {N:term}pred M' N -> pred M'' N -> dia_prop M' M''
;
rec dia : (g:rctx) [g |- pred M M1] -> [g |- pred M M2]
          -> [g |- dia_prop M1 M2] =
/ total d (dia _ _ _ _ d _) /
fn d => fn s => case d of
| [g |- #p.2] => let [g |- #q.2] = s in [g |- dia_result _ (#q.2) (#q.2)]
| [g |- ap D1 D2] => (case s of
                      | [g |- beta (\y.\v. D1') (D2')]  => 
                            let [g |- lm \y.\v.R1[..,y,v]] = [g |- D1] in 
                            let [g |- dia_result H2 S2 (S2')] = dia [g |- D2] [g |- D2'] in 
                            let [g, b:block(x:term,u:pred x x) |- dia_result H1[..,b.1] S1[..,b.1,b.2] (S1'[..,b.1,b.2])] =
                            dia [g,b:block(x:term,u:pred x x) |- R1[..,b.1,b.2]] [g,b |- D1'[..,b.1,b.2]] in 
                            let [g |- S''] = subst [g, y:term, v:pred y y |-  S1'[..,y,v]] [g |- S2'] in 
                            [g |- (dia_result H1[..,H2] (beta (\y.\v.S1[..,y,v]) S2) (S''))]
                     | [g |- ap (D1') (D2')] => 
                           let [g |- dia_result H1 S1 S1'] = dia [g |- D1] [g |- D1'] in
                            let [g |- dia_result H2 S2 S2'] = dia [g |- D2] [g |- D2'] in
                            [g |- dia_result _ (ap S1 S2) (ap S1' S2')]
                     )
| [g |- lm \y.\v.D[..,y,v]] => let [g |- lm \x.\u.D'[..,x,u]] = s in
                               let [g,b:block(x:term,u:pred x x) |- dia_result _ IH1[..,b.1,b.2] IH2[..,b.1,b.2]] =
                               dia [g,b:block(x:term,u:pred x x) |- D[..,b.1,b.2]] [g,b |- D'[..,b.1,b.2]] in
                               [g |- dia_result _ (lm \x.\u.IH1[..,x,u]) (lm \x.\u.IH2[..,x,u])]
| [g |- beta (\y.\v.D1[..,y,v]) D2] => (case s of
                                        | [g |- ap D1' D2'] =>
                                          let [g |- lm \y.\v.R1[..,y,v]] = [g |- D1'] in
                                          let [g |- dia_result H2 S2 (S2')] = dia [g |- D2] [g |- D2'] in
                                          let [g, b:block(y:term,u:pred y y) |- dia_result H1[..,b.1] S1[..,b.1,b.2] S1'[..,b.1,b.2]] =
                                          dia [g, b:block(y:term,u:pred y y) |- D1[..,b.1,b.2]] [g,b |- R1[..,b.1,b.2]] in
                                          let [g |- S] = subst [g,y,v |-  S1[..,y,v]] [g |- S2] in
                                          [g |- dia_result _ S (beta (\y.\v.S1'[..,y,v]) S2')]
                                        | [g |- beta (\x.\u.D1'[..,x,u]) D2'] =>
                                          let [g |- dia_result H2 S2 (S2')] = dia [g |- D2] [g |- D2'] in
                                          let [g, b:block(y:term,u:pred y y) |- dia_result H1[..,b.1] S1[..,b.1,b.2] S1'[..,b.1,b.2]] =
                                          dia [g, b:block(y:term,u:pred y y) |- D1[..,b.1,b.2]] [g,b |- D1'[..,b.1,b.2]] in
                                          let [g |- S'] = subst [g,y,v |-  S1[..,y,v]] [g |- S2] in
                                          let [g |- S''] = subst [g,y,v |-  S1'[..,y,v]] [g |- S2'] in
                                          [g |- dia_result _ S' S''])
;


%Strip Property Lemma
LF strip_prop: term -> term -> type =
| strip_result: mstep_pred M' N -> pred M'' N
                -> strip_prop M' M'';
rec strip : (g:rctx)[g |- pred M M'] -> [g |- mstep_pred M M'']
                -> [g |- strip_prop M' M''] =
/ total s (strip g m m' m'' r s) /
fn r => fn s => case s of
| [g |- id] => let [g |- R] = r in
               [g |- strip_result id R]
| [g |- step R1 R2] => let [g |- dia_result _ S1 S1'] = dia r [g |- R1] in
                       let [g |- strip_result S2 S2'] = strip [g |- S1'] [g |- R2] in
                       [g |- strip_result (step S1 S2) S2']
;


%Confluence for multistep parallel reduction
LF conf_prop : term -> term -> type =
| conf_result : mstep_pred M' N -> mstep_pred M'' N -> conf_prop M' M''
;

rec conf : (g:rctx) [g |- mstep_pred M M'] -> [g |- mstep_pred M M''] -> [g |- conf_prop M' M''] =
/ total d (conf _ _ _ _ d _) /
fn d => fn s => case d of
| [g |- id] => let [g |- S] = s in [g |- conf_result S id]
| [g |- step D1 D2] => let [g |- strip_result D1' D2'] = strip [g |- D1] s in
                       let [g |- conf_result S1 S2] = conf [g |- D2] [g |- D1'] in
                       [g |- conf_result S1 (step D2' S2)]
;


%Church-Rosser for parallel reduction
rec cr : (g:rctx) [g |- conv_pred M M'] -> [g |- conf_prop M M'] =
/ total d (cr _ _ _ d) /
fn d => case d of
| [g |- reduce D] => [g |- conf_result D id]
| [g |- expand D] => [g |- conf_result id D]
| [g |- comp D1 D2] => let [g |- conf_result S' S''] = cr [g |- D1] in
                       let [g |- conf_result D' D''] = cr [g |- D2] in
                       let [g |- conf_result IH1 IH2] = conf [g |- S''] [g |- D'] in
                       let [g |- D1'] = append [g |- S'] [g |- IH1] in
                       let [g |- D2'] = append [g |- D''] [g |- IH2] in
                       [g |- conf_result D1' D2']
;
