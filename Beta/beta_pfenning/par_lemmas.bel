schema rctx = block(x:term, t:pred x x);

%Reflexivity parallel reduction
rec refl_par : {g:rctx}{M : [g |- term]}[g |- pred M M] =
/ total m (refl_par _ m) /
mlam g => mlam M => case [g |- M] of
| [g |- #p.1] => [g |- #p.2]
| [g |- lam \x.M'[..,x]] => let [g, b:block(x:term,v:pred x x) |- IH[..,b.1,b.2]] =
                            refl_par [g, b:block(x:term,v:pred x x)] [g,b |- M'[..,b.1]] in 
                            [g |- lm \x.\v.IH[..,x,v]]
| [g |- app M1 M2] => let [g |- IH1] = refl_par [g] [g |- M1] in 
                      let [g |- IH2] = refl_par [g] [g |- M2] in 
                      [g |- ap IH1 IH2]
;

%Transitivity of multistep parallel reduction
rec append : (g:rctx)[g |- mstep_pred M M'] -> [g |- mstep_pred M' M''] -> [g |- mstep_pred M M''] =
/ total d (append _ _ _ d _) /
fn d => fn s => case d of
| [g |- id] => s
| [g |- step D1 D2] => (case s of
                      | [g |- id] => d
                      | [g |- step S1 S2] => let [g |- IH] = append [g |- D2] s in
                        [g |- step D1 IH])
;
