rec beta_to_par: (g:pctx) [g |- beta_red M N] -> [g |- pred M N] =
/ total d (beta_to_par _ _ _ d) /
fn d => case d of
| [g |- beta1] : [g |- beta_red (app (lam \x. M1) M2) M1[..,M2]] =>
          let [g,b:block(x:term,t:pred x x) |-  I1[..,b.1,b.2]] =
          refl_par [g,b:block (x:term, t:pred x x)]  [g,b  |-  M1[..,b.1] ] in
          let [g |- I2] = refl_par [g] [g |- M2 ] in
          [g |- beta (\x.\u. I1[..,x,u]) I2]
| [g |- lm1 \y.D[..,y]] => let [g,b:block(x:term,u:pred x x) |- IH[..,b.1,b.2]] =
                            beta_to_par [g,b:block(x:term,u:pred x x) |- D[..,b.1]] in
                            [g |- lm \x.\u.IH[..,x,u]]
| [g |- apl1 D] : [g |- (beta_red (app M1 M2) (app M1' M2))] =>
                   let [g |- IH] = beta_to_par [g |- D] in
                   let [g |- I2] = refl_par [g] [g |- M2] in
                   [g |- ap IH I2]
| [g |- apr1 D] : [g |- (beta_red (app M1 M2) (app M1 M2'))] =>
                   let [g |- IH] = beta_to_par [g |- D] in
                   let [g |- I1] = refl_par [g] [g |- M1] in
                   [g |- ap I1 IH]
;


rec par_to_beta : (g:pctx) [g |- pred M N] -> [g |- mstep M N] =
/ total d (par_to_beta _ _ _ d) /
fn d => case d of
| [g |- #p.2] => [g |- id1]
| {D1: [g |- pred M1 N1]}{D2: [g |- pred M2 N2]}[g |- ap D1 D2] =>
                     let [g |- IH1] = par_to_beta [g |- D1] in
                     let [g |- S1]  = apl1* [g |- M2] [g |- IH1] in
                     let [g |- IH2] = par_to_beta [g |- D2] in
                     let [g |- S2] = apr1* [g |- N1 ] [g |- IH2] in
                     trans_mstep [g |- S1] [g |- S2]
| [g |- lm \y.\v.D[..,y,v]] =>
          let [g, b:block(x:term, u:pred x x) |- IH[..,b.1]] = par_to_beta [g, b:block(x:term, u:pred x x)|- D[..,b.1,b.2]] in
          lm1* [g,x:term |- IH[..,x]]
| [g |- beta (\y.\v.D1[..,y,v]) D2] =>
  let {M1':[g,x:term |-  term]}{IH1:[g,x:term |-  mstep M1 M1']}
  [g, b:block(x:term, u:pred x x) |- IH1[..,b.1]] = par_to_beta [g, b:block(x:term, u:pred x x)|- D1[..,b.1,b.2]] in
  let {M2:[g |- term]}{IH2:[g |- mstep M2 M2']}[g |- IH2] = par_to_beta [g |- D2] in
  let [g |- S'] = lm1* [g,x |- IH1[..,x]] in
  let [g |- S''] = apl1*  [g |- M2 ] [g |- S'] in
  let [g |- S'''] = apr1* [g |- lam \x. M1' ] [g |- IH2 ] in
  let [g |- S1']  = trans_mstep [g |- S''] [g |- S'''] in
    trans_mstep [g |- S1'] [g |- step1 beta1 id1 ]
;

rec mpar_to_mbeta: (g:pctx) [g |- mstep_pred M N] -> [g |- mstep M N] =
/ total d (mpar_to_mbeta _ _ _ d) /
fn d => case d of
| [g |- id] => [g |- id1]
| [g |- step D1 D2] => let [g |- IH1] = par_to_beta [g |- D1] in
                       let [g |- IH2] = mpar_to_mbeta [g |- D2] in
                       trans_mstep [g |- IH1] [g |- IH2]
;

rec mbeta_to_mpar: (g:pctx) [g |- mstep M N] -> [g |- mstep_pred M N] =
/ total d (mbeta_to_mpar _ _ _ d) /
fn d => case d of
| [g |- id1] => [g |- id]
| [g |- step1 D1 D2] => let [g |- IH1] = mbeta_to_mpar [g |- D2] in
                        let [g |- IH2] = beta_to_par [g |- D1] in
                        [g |- step IH2 IH1]
;