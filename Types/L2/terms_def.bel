%  Well-typed Terms and Reductions


LF ty : type =
%   | base : ty       
   | arr  : ty -> ty -> ty
   | all : (ty -> ty) -> ty			 
;
%name ty T.

LF tm : ty -> type =
   | abs : (tm A -> tm B) -> tm (arr A B)
   | app : tm (arr A B) -> tm A -> tm B
   | tlam : ({a:ty} tm (A a)) -> tm (all A)
   | tapp : tm (all A) -> {B:ty} tm (A B)
;

schema cxt = tm A + ty;

LF step : tm A -> tm A -> type =
  | rbeta : step (app (abs M) N) (M N)
  | rbetall : step (tapp (tlam M) A) (M A)
  | rabs  : ({x : tm A} step (M x) (M' x)) -> step (abs M) (abs M')
  | rtlam  : ({x : ty} step (M x) (M' x)) -> step (tlam M) (tlam M')
  | rappl : step M M' -> step (app M N) (app M' N)
  | rappr : step N N' -> step (app M N) (app M N')
  | tappl : step M M' -> step (tapp M A) (tapp M' A)			       
;

LF mstep : tm A -> tm A -> type =
   | m-refl :  mstep M M
   | m-step : step M N -> mstep N M' -> mstep M M'
;

% Properties of multi-step reductions
% Transitivity of multi-step reductions
rec m-trans : (g : cxt) {M1 : [g |- tm A[..]]}
      [g |- mstep M1 M] -> [g |- mstep M M2]
              -> [g |- mstep M1 M2] =
/ total s1 (m-trans g a m1 m2 m s1) /
mlam M1 => fn s1, s2 => case s1 of
  | [_ |- m-refl] => s2
  | [_ |- m-step S MS] =>
        let [_ |- MS'] = m-trans _ [_ |- MS] s2 in
        [_ |- m-step S MS']
;

% congruence of mstep: app case left
rec mstep_appl : (g: cxt) {M  : [g |- tm (arr A[..] B[..])]}{M' : [g |- tm (arr A[..] B[..])]} {N  : [g |- tm A[..]]}
        [g |- mstep M M'] -> [g |- mstep (app M N) (app M' N)] =
/ total ms (mstep_appl g a b m m' n ms) /
mlam M => mlam M' => mlam N => fn ms =>
case ms of
  | [_ |- m-refl] => [_ |- m-refl]
  | [_ |- m-step S MS'] =>
        let [_ |- MS''] = mstep_appl _ [_ |- M'] [_ |- N] [_ |- MS'] in
    [_ |- m-step (rappl S) MS'']
;

% % congruence of mstep: app right
rec mstep_appr : (g: cxt) {M  : [g |- tm (arr A[..] B[..])]}{N  : [g |- tm A[..]]}{N' : [g |- tm A[..]]}
        [g |- mstep N N'] -> [g |- mstep (app M N) (app M N')] =
/ total ms (mstep_appr g a b m n n' ms) /
mlam M => mlam N => mlam N' => fn ms =>
case ms of
  | [g |- m-refl] => [g |- m-refl]
  | [g |- m-step S MS'] =>
        let [_ |- MS''] = mstep_appr [_ |- M] [_ |- _] [_ |- N'] [_ |- MS'] in
    [g |- m-step (rappr S) MS'']
;

% congruence of mstep: abs case
rec mstep_abs : (g : cxt) {M : [g , x: tm A[..] |- tm B[..]]}
        [g, x:tm A[..] |- mstep M M']-> [g |- mstep (abs \x.M) (abs \x.M')] =
    / total ms (mstep_abs g a b m m' ms) /
    mlam M => fn s1 => case s1 of
    | [g, x:tm A[..] |- m-refl] => [g |- m-refl]
    | [g, x:tm A[..] |- m-step S MS] =>
      let [g |- MS'] = mstep_abs [g, x : tm A[..] |- _ ] [g, x : tm A[..] |- MS] in 
      [g |- m-step (rabs \x.S) MS']
;

% % congruence of mstep: tlam case
rec mstep_tlam : (g : cxt) {M : [g , a:ty |- tm B[..,a]]}
        [g, a:ty |- mstep M M']-> [g |- mstep (tlam \x.M) (tlam \x.M')] =
/ total ms (mstep_tlam _ _ _ m ms) /
    mlam M => fn s1 => case s1 of
    | [g, a:ty |- m-refl] => [g |- m-refl]
    | [g, a:ty |- m-step S MS] => 
      let [g |- MS'] = mstep_tlam _ [g, a:ty |- MS] in   
      [g |- m-step (rtlam \x.S) MS']
;

% congruence of mstep: tapp (only) case
rec mstep_tapp : (g : cxt) {M  : [g |- tm (all \x.A)]} {B: [g |- ty]} [g |- mstep M M'] -> [g |- mstep (tapp M B) (tapp M' B)] =
/ total ms (mstep_tapp _ _ _ _ _ ms) /
 mlam M => mlam B => fn s1 => case s1 of
 | [g |- m-refl] => [g |- m-refl]
 | [g |- m-step S MS] => 
 		let [g |- MS'] = mstep_tapp _ [g |- B] [g |- MS] in 
 		[g |- m-step (tappl S) MS']
 ;

% simultaneous substitution for mstep -- not needed in the proof
rec subst_mred : (g: cxt) {M : [g, x: tm A[..] |- tm B[..]]}{N : [g |- tm A[..]]}{N': [g |- tm A[..]]}
        [g |- step N N'] -> [g |- mstep M[..,N] M[..,N']] =
   / trust /
   % Totality checker does not take into account exchange; it only consider direct subterms
    mlam M => mlam N => mlam N' => fn s => case [_, x:tm _ |- M] of
    | [g, x:tm A[..] |- x ] => let [g |- S] = s in [g |- m-step S m-refl]
    | [g, x:tm A[..] |- #p[..] ] => [g |- m-refl]
    | [g, x:tm A[..] |- abs \y.M] =>
      let [g |- S] = s in
      let [ g, y: tm _ |- S'] = subst_mred [g, y:tm _ , x:tm A[..] |- M[.., x, y]]
					   [g, y:tm _ |- N[..]] [g, y:tm _ |- N'[..]] [g, y:tm _ |- S[..]]  in
      mstep_abs [g, y : tm _ |- _] [g, y: tm _ |- S']
    | [g, x:tm A[..] |- app M1 M2] =>
      let [g |- S1] = subst_mred [g, x:tm A[..] |- M1] [g |- N] [g |- N'] s in
      let [g |- S2] = subst_mred [g, x:tm A[..] |- M2] [g |- N] [g |- N'] s in
      let [g |- MS1] =  mstep_appl [g |- M1[..,N]]  [g |- M1[.., N'] ] [g |- M2[.., N]]    [g |- S1] in
      let [g |- MS2] = mstep_appr  [g |- M1[..,N']]  [g |- M2[..,N]]    [g |- M2[.., N'] ]  [g |- S2] in
      m-trans [g |- _ ] [g |- MS1] [g |- MS2]
    | [g, x:tm A[..] |- tlam \y.M] => 
    		let [g |- S] = s in
    		let [ g, a:ty |- S'] = subst_mred [g, a:ty , x:tm _ |- M[.., x, a]] _ _ [g,a:ty |- S[..]] in 
    		mstep_tlam [g,a:ty |- _] [g, a:ty |- S']
    | [g, x:tm A[..] |- tapp M1 M2] => 
    		let [g |- S1] = subst_mred [g, x:tm A[..] |- M1] [g |- N] [g |- N'] s in 
    		mstep_tapp _ _ [g |- S1]
;
