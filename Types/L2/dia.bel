%Diamond property

LF dia_prop : tm A -> tm A -> type =
| dia_res : pred M' N -> pred M'' N -> dia_prop M' M''
;

rec dia : (g:pcctx){M: [g |- tm A]}[g |- pred M M'] -> [g |- pred M M''] -> [g |- dia_prop M' M''] =
/ total d (dia _ _ _ _ _ d _) /
mlam M => fn d => fn s => let [g |- S] : [g |- pred M M''] = s in
                let [g |- red_res H] = cd_tot [g] [g |- M] in
                let [g |- H1] = tri _ [g |- H] d in
                let [g |- H2] = tri _ [g |- H] s in
                [g |- dia_res H1 H2]
;


%Strip Property Lemma
LF strip_prop: tm A -> tm A -> type =
| strip_res: mstep_pred M' N -> pred M'' N -> strip_prop M' M'';

rec strip : (g:pctx){M : [g |- tm A]} [g |- pred M M'] -> [g |- mstep_pred M M'']
                -> [g |- strip_prop M' M''] =
/ total {r s} (strip _ _ _ _ _ r s) /
mlam M => fn r => fn s => case s of
| [g |- p-refl] => let [g |- R] = r in
               [g |- strip_res p-refl R]
| [g |- p-step R1 R2] => let [g |- dia_res S1 S1'] = dia _ r [g |- R1] in
                         let [g |- strip_res S2 S2'] = strip _ [g |- S1'] [g |- R2] in
                         [g |- strip_res (p-step S1 S2) S2']
;


LF conf_prop : tm A -> tm A -> type =
| conf_res : mstep_pred M' N -> mstep_pred M'' N -> conf_prop M' M''
;

rec conf : (g:pcctx){M: [g |- tm A]}[g |- mstep_pred M M'] -> [g |- mstep_pred M M''] -> [g |- conf_prop M' M''] =
/ total d (conf _ _ _ _ _ d _) /
mlam M => fn d => fn s => case d of
| [g |- p-refl] => let [g |- D] = d in
				   let [g |- S] = s in 
				   [g |- conf_res S (p-refl)]
| [g |- p-step D1 D2] => let [g |- strip_res H1 H2] = strip _ [g |- D1] s in 
						 let [g |- conf_res H1' H2'] = conf _ [g |- D2] [g |- H1] in 
						 [g |- conf_res H1' (p-step H2 H2')]
;
