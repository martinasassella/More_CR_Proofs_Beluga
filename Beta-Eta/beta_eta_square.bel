%square beta eta eta* beta=  

LF eta*_beta=_joinable : term -> term -> type =
| eta*_beta=_result : eta_red* M1 N -> beta_red= M2 N -> eta*_beta=_joinable M1 M2
;

rec be_square : (g:ctx) {M : [g |- term]}{M1 : [g |- term]}{M2 : [g |- term]}
          [g |- beta_red M M1] -> [g |- eta_red M M2]
          -> [g |- eta*_beta=_joinable M1 M2] =
/ total d (be_square _ _ _ _ d _) /
mlam M => mlam M1 => mlam M2 => fn d => fn s =>
    case d of
    | [g |- beta1] : [g |- beta_red (app (lam (\x. M')) M1') (M'[.., M1'])] =>
        (case s of
        | [g |- cong_app1 S] =>
            (case [g |- S] of
            | [g |- eta] => [g |- eta*_beta=_result id_e* id_b=]
            | [g |- cong_lam \x.S'[..,x]] =>
                  let [g |- S''] = subst_eta_closed [g |- M1'] [g,x:term |- S'[..,x]] in
                  [g |- eta*_beta=_result (cl_e* S'') (cl_b= beta1)]
            )
        | [g |- cong_app2 S] : [g |- eta_red (app (lam (\x. M')) N) (app (lam (\x. M')) M2')] =>
                let [g |- S'] = subst_eta [g] [g, x:term |- M'] [g |- S] in
                [g |- eta*_beta=_result S' (cl_b= beta1)]
        )
    | [g |- lm1 \x.D[..,x]] =>
        (case s of
        | [g |- eta] => (case [g, x:term |- D] of
                        | [g, x:term |- apl1 D'] =>
                            let exStrBeta [g,x:term |- D'] [g |- H1] e =
                            strengthen_beta [g] [g,x:term |- D'] in
                            let [g,x:term |- refl] = e in
                            [g |- eta*_beta=_result (cl_e* eta) (cl_b= H1)]
                        | [g, x:term |- beta1] =>
                             [g |- eta*_beta=_result (id_e*) (id_b=)]
                        )

        | [g |- cong_lam \y.S[..,y]] =>
            let [g,x:term |- eta*_beta=_result H1 H2] = be_square _ _ _ [g,x:term |- D] [g,x |- S] in
            let [g |- H1'] = cong_lam* [g,x:term |- H1[..,x]] in
            let [g |- H2'] = lm= [g,x:term |- H2[..,x]] in
            [g |- eta*_beta=_result H1' H2']
        )
    | [g |- apl1 D] : [g |- beta_red (app M1' M') (app M2' M')] =>
        (case s of
        | [g |- cong_app1 S] : [g |- eta_red (app N1' N') (app N2' N')] =>
            let [g |- eta*_beta=_result H1 H2] =
            be_square _ _ _ [g |- D] [g |- S] in
            let [g |- H1'] = cong_app1* [g |- N'] [g |- H1] in
            let [g |- H2'] = apl= [g |- N'] [g |- H2] in
            [g |- eta*_beta=_result H1' H2']
        | [g |- cong_app2 S] : [g |- eta_red (app N' N1') (app N' N2')] =>
            let [g |- H1] = cong_app2* [g |- M2'] [g |- (cl_e* S)] in
            let [g |- H2] = apl= [g |- N2'] [g |- (cl_b= D)] in
            [g |- eta*_beta=_result H1 H2]
        )
    | [g |- apr1 D] : [g |- beta_red (app M' M1') (app M' M2')] =>
        (case s of
        | [g |- cong_app1 S] : [g |- eta_red (app N1' N') (app N2' N')] =>
            let [g |- H1] = cong_app1* [g |- M2'] [g |- (cl_e* S)] in
            let [g |- H2] = apr= [g |- N2'] [g |- (cl_b= D)] in
            [g |- eta*_beta=_result H1 H2]
        | [g |- cong_app2 S] : [g |- eta_red (app M' M1') (app M' M2')] =>
            let [g |- eta*_beta=_result H1 H2] =
            be_square _ _ _ [g |- D] [g |- S] in
            let [g |- H1'] = cong_app2* [g |- M'] [g |- H1] in
            let [g |- H2'] = apr= [g |- M'] [g |- H2] in
            [g |- eta*_beta=_result H1' H2']
        )
;
