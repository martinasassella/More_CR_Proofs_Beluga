%Proof of the COMMUTATION LEMMA used in the proof of the confluence of beta-eta reduction

%Preliminary lemma
rec betaeq_betastar : (g:ctx) [g |- beta_red= M N] -> [g |- beta_red* M N] =
/ total d (betaeq_betastar _ _ _ d) /
fn d => case d of
| [g |- id_b=] => [g |- id_b*]
| [g |- cl_b= D] => [g |- cl_b* D]
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Lemma 3) (square R S T R=) & (S c T) -> square R= S T R=
%In particular, we need: 3) square beta eta eta* beta= -> square beta= eta eta* beta=


rec lemma_three_be : (g:ctx) ({M: [g |- term]}{M1: [g |- term]}{M2: [g |- term]}
                      [g |- beta_red M M1] -> [g |- eta_red M M2]
                      -> [g |- eta*_beta=_joinable M1 M2])
                      -> ({M': [g |- term]}{M1': [g |- term]}{M2': [g |- term]}
                      [g |- beta_red= M' M1'] -> [g |- eta_red M' M2'] -> [g |- eta*_beta=_joinable M1' M2']) =
/ total s (lemma_three_be _ _ _ _ _ s _) /
fn d => mlam M' => mlam M1' => mlam M2' => fn s => fn t =>
    case s of
      | [g |- id_b=] => let [g |- T] = t in
                      [g |- eta*_beta=_result (cl_e* T) id_b=]
      | [g |- cl_b= S] : [g |- beta_red= M' M1'] => let [g |- T] : [g |- eta_red M' M2'] = t in
                      let [g |- D] = d [g |- M'] [g |- M1'] [g |- M2'] [g |- S] [g |- T] in
                      let [g |- eta*_beta=_result H1 H2] = [g |- D] in
                      [g |- eta*_beta=_result H1 H2]
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Lemma 1) : square R S T U -> square S R U T
%We use it twice in the Commutation Lemma's proof:

%1.1) square beta= eta eta* beta= -> square eta beta= beta= eta*

LF beta=_eta*_joinable : term -> term -> type =
| beta=_eta*_result : beta_red= M1 N -> eta_red* M2 N -> beta=_eta*_joinable M1 M2
;

rec lemma_one_first_be : (g:ctx) ({M: [g |- term]}{M1: [g |- term]}{M2: [g |- term]}
                      [g |- beta_red= M M1] -> [g |- eta_red M M2]
                      -> [g |- eta*_beta=_joinable M1 M2])
                       -> ({M': [g |- term]}{M1': [g |- term]}{M2': [g |- term]}
                       [g |- eta_red M' M1'] -> [g |- beta_red= M' M2'] -> [g |- beta=_eta*_joinable M1' M2']) =
/ total t (lemma_one_first_be _ _ _ _ _ _ t) /
fn d => mlam M' => mlam M1' => mlam M2' => fn s => fn t =>
    let [g |- eta*_beta=_result H1 H2] = d _ _ _ t s in
    [g |- beta=_eta*_result H2 H1]
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Lemma 4) : square R S S T -> square R* S S T*
%We use it twice in the Commutation Lemma's proof:

%4.1) square eta beta= beta= eta* -> square eta* beta= beta= eta*


rec lemma_four_first_be : (g:ctx) ({M: [g |- term]}{M1: [g |- term]}{M2: [g |- term]}
                      [g |- eta_red M M1] -> [g |- beta_red= M M2]
                      -> [g |- beta=_eta*_joinable M1 M2])
                      -> ({M': [g |- term]}{M1': [g |- term]}{M2': [g |- term]}
                      [g |- eta_red* M' M1'] -> [g |- beta_red= M' M2'] -> [g |- beta=_eta*_joinable M1' M2']) =
/ total s (lemma_four_first_be _ _ _ _ _ s _) /
fn d => mlam M' => mlam M1' => mlam M2' => fn s => fn t =>
    case t of
        | [g |- id_b=] => let [g |- S] = s in
                [g |- beta=_eta*_result id_b= S]
        | [g |- cl_b= T] : [g |- beta_red= M' M2'] =>
                (case s of
                | [g |- id_e*] => [g |- beta=_eta*_result (cl_b= T) id_e*]
                | [g |- cl_e* S'] : [g |- eta_red* M' M1'] =>
                      let [g |- D] = d [g |- M'] [g |- M1'] [g |- M2'] [g |- S'] [g |- (cl_b= T)] in
                      let [g |- beta=_eta*_result H1 H2] = [g |- D] in
                      [g |- beta=_eta*_result H1 H2]
                | [g |- tr_e* S1 S2] : [g |- eta_red* M' M1'] =>
                      let [g |- S'] : [g |- eta_red* M' M] = [g |- S1] in
                      let [g |- IH1] = lemma_four_first_be d [g |- M'] [g |- M] [g |- M2'] [g |- S'] t in
                      let [g |- beta=_eta*_result H1 H2] = [g |- IH1] in
                      let [g |- IH2] = lemma_four_first_be d _ [g |- M1'] _ [g |- S2] [g |- H1] in
                      let [g |- beta=_eta*_result H1' H2'] = [g |- IH2] in
                      [g |- beta=_eta*_result H1' (tr_e* H2 H2')]
                )
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%1.2) square eta* beta= beta= eta* -> square beta= eta* eta* beta=


rec lemma_one_second_be : (g:ctx) ({M: [g |- term]}{M1: [g |- term]}{M2: [g |- term]}
                      [g |- eta_red* M M1] -> [g |- beta_red= M M2]
                      -> [g |- beta=_eta*_joinable M1 M2])
                      -> ({M': [g |- term]}{M1': [g |- term]}{M2': [g |- term]}
                      [g |- beta_red= M' M1'] -> [g |- eta_red* M' M2'] -> [g |- eta*_beta=_joinable M1' M2']) =
/ total s (lemma_one_second_be _ _ _ _ _ s _) /
fn d => mlam M' => mlam M1' => mlam M2' => fn s => fn t =>
    let [g |- beta=_eta*_result IH1 IH2] = d _ _ _ t s in
    [g |- eta*_beta=_result IH2 IH1]
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%4.2) square beta= eta* eta* beta= -> square beta* eta* eta* beta*

LF commute : term -> term -> type =
| commute_result : eta_red* M1 N -> beta_red* M2 N -> commute M1 M2
;

rec lemma_four_second_be : (g:ctx) ({M: [g |- term]}{M1: [g |- term]}{M2: [g |- term]}
                      [g |- beta_red= M M1] -> [g |- eta_red* M M2]
                      -> [g |- eta*_beta=_joinable M1 M2])
                      -> ({M': [g |- term]}{M1': [g |- term]}{M2': [g |- term]}
                      [g |- beta_red* M' M1'] -> [g |- eta_red* M' M2'] -> [g |- commute M1' M2']) =
/ total s (lemma_four_second_be _ _ _ _ _ s _) /
fn d => mlam M' => mlam M1' => mlam M2' => fn s => fn t =>
    case s of
      | [g |- id_b*] => let [g |- T] = t in [g |- commute_result T id_b*]
      | [g |- cl_b* S] => let [g |- eta*_beta=_result H1 H2] = d _ _ _ [g |- (cl_b= S)] t in
                          let [g |- H2'] = betaeq_betastar [g |- H2] in
                          [g |- commute_result H1 H2']
      | [g |- tr_b* S1 S2] => let [g |- commute_result IH1' IH2'] =
                              lemma_four_second_be d _ _ _ [g |- S1] t in
                              let [g |- commute_result IH1'' IH2''] =
                              lemma_four_second_be d _ _ _ [g |- S2] [g |- IH1'] in
                              [g |- commute_result IH1'' (tr_b* IH2' IH2'')]
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%COMMUTATION LEMMA FOR BETA ETA
%square R S S* R= -> square  R* S* S* R*
%We use it to prove: square beta eta eta* beta= -> square beta* eta* eta* beta*
%i.e., since beta and eta are CR, if square_beta_eta holds, beta and eta commute
%and I can conclude the confluence of beta_eta

rec commutation_lemma : (g:ctx) ({M: [g |- term]}{M1: [g |- term]}{M2: [g |- term]}
                      [g |- beta_red M M1] -> [g |- eta_red M M2]
                      -> [g |- eta*_beta=_joinable M1 M2])
                      -> ({M': [g |- term]}{M1': [g |- term]}{M2': [g |- term]}
                      [g |- beta_red* M' M1'] -> [g |- eta_red* M' M2'] -> [g |- commute M1' M2']) =
/ total s (commutation_lemma _ _ _ _ _ s _) /
fn d => lemma_four_second_be (lemma_one_second_be (lemma_four_first_be (lemma_one_first_be (lemma_three_be d))))
;
